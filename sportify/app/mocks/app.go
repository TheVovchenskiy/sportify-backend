// Code generated by MockGen. DO NOT EDIT.
// Source: app.go
//
// Generated by this command:
//
//	mockgen -source=app.go -destination=mocks/app.go -package=mocks EventStorage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/TheVovchenskiy/sportify-backend/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockEventStorage is a mock of EventStorage interface.
type MockEventStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEventStorageMockRecorder
	isgomock struct{}
}

// MockEventStorageMockRecorder is the mock recorder for MockEventStorage.
type MockEventStorageMockRecorder struct {
	mock *MockEventStorage
}

// NewMockEventStorage creates a new mock instance.
func NewMockEventStorage(ctrl *gomock.Controller) *MockEventStorage {
	mock := &MockEventStorage{ctrl: ctrl}
	mock.recorder = &MockEventStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStorage) EXPECT() *MockEventStorageMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventStorage) CreateEvent(ctx context.Context, event *models.FullEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventStorageMockRecorder) CreateEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventStorage)(nil).CreateEvent), ctx, event)
}

// DeleteEvent mocks base method.
func (m *MockEventStorage) DeleteEvent(ctx context.Context, userID, eventID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, userID, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventStorageMockRecorder) DeleteEvent(ctx, userID, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventStorage)(nil).DeleteEvent), ctx, userID, eventID)
}

// EditEvent mocks base method.
func (m *MockEventStorage) EditEvent(ctx context.Context, event *models.FullEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditEvent indicates an expected call of EditEvent.
func (mr *MockEventStorageMockRecorder) EditEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditEvent", reflect.TypeOf((*MockEventStorage)(nil).EditEvent), ctx, event)
}

// GetCreatorID mocks base method.
func (m *MockEventStorage) GetCreatorID(ctx context.Context, eventID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatorID", ctx, eventID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatorID indicates an expected call of GetCreatorID.
func (mr *MockEventStorageMockRecorder) GetCreatorID(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatorID", reflect.TypeOf((*MockEventStorage)(nil).GetCreatorID), ctx, eventID)
}

// GetEvent mocks base method.
func (m *MockEventStorage) GetEvent(ctx context.Context, id uuid.UUID) (*models.FullEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, id)
	ret0, _ := ret[0].(*models.FullEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventStorageMockRecorder) GetEvent(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventStorage)(nil).GetEvent), ctx, id)
}

// GetEvents mocks base method.
func (m *MockEventStorage) GetEvents(ctx context.Context) ([]models.ShortEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx)
	ret0, _ := ret[0].([]models.ShortEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventStorageMockRecorder) GetEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventStorage)(nil).GetEvents), ctx)
}

// SubscribeEvent mocks base method.
func (m *MockEventStorage) SubscribeEvent(ctx context.Context, id, userID uuid.UUID, subscribe bool) (*models.ResponseSubscribeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeEvent", ctx, id, userID, subscribe)
	ret0, _ := ret[0].(*models.ResponseSubscribeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeEvent indicates an expected call of SubscribeEvent.
func (mr *MockEventStorageMockRecorder) SubscribeEvent(ctx, id, userID, subscribe any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvent", reflect.TypeOf((*MockEventStorage)(nil).SubscribeEvent), ctx, id, userID, subscribe)
}

// MockFileStorage is a mock of FileStorage interface.
type MockFileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageMockRecorder
	isgomock struct{}
}

// MockFileStorageMockRecorder is the mock recorder for MockFileStorage.
type MockFileStorageMockRecorder struct {
	mock *MockFileStorage
}

// NewMockFileStorage creates a new mock instance.
func NewMockFileStorage(ctrl *gomock.Controller) *MockFileStorage {
	mock := &MockFileStorage{ctrl: ctrl}
	mock.recorder = &MockFileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorage) EXPECT() *MockFileStorageMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockFileStorage) Check(ctx context.Context, files []string) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, files)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockFileStorageMockRecorder) Check(ctx, files any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockFileStorage)(nil).Check), ctx, files)
}

// SaveFile mocks base method.
func (m *MockFileStorage) SaveFile(ctx context.Context, file []byte, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", ctx, file, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockFileStorageMockRecorder) SaveFile(ctx, file, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFileStorage)(nil).SaveFile), ctx, file, fileName)
}
